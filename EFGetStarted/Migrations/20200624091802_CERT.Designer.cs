// <auto-generated />
using System;
using EFGetStarted;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace EFGetStarted.Migrations
{
    [DbContext(typeof(CERTContext))]
    [Migration("20200624091802_CERT")]
    partial class CERT
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("EFGetStarted.CERT_Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.Property<int?>("courselistcourseid")
                        .HasColumnType("int");

                    b.HasKey("StudentId");

                    b.HasIndex("courselistcourseid");

                    b.ToTable("CERT_Student_all","11nstz");
                });

            modelBuilder.Entity("EFGetStarted.CERT_course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<string>("courseday")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.Property<string>("coursename")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.Property<int>("coursepoint")
                        .HasColumnType("vinyint");

                    b.Property<int?>("studentlistId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.HasIndex("studentlistId");

                    b.HasIndex("courseday", "coursename", "coursepoint")
                        .IsUnique();

                    b.ToTable("CERT_course_all","11nstz");
                });

            modelBuilder.Entity("EFGetStarted.CERT_courselist", b =>
                {
                    b.Property<int>("courseid")
                        .HasColumnType("int");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<string>("courseday")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("coursename")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("coursepoint")
                        .HasColumnType("int");

                    b.Property<int?>("studentIdlistId")
                        .HasColumnType("int");

                    b.HasKey("courseid");

                    b.HasIndex("studentIdlistId");

                    b.HasIndex("courseday", "coursename", "coursepoint")
                        .IsUnique()
                        .HasFilter("[courseday] IS NOT NULL AND [coursename] IS NOT NULL");

                    b.ToTable("CERT_course_privatelist","11nstz");
                });

            modelBuilder.Entity("EFGetStarted.CERT_studentlist", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("sex")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("studentname")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CERT_course_studentlist","11nstz");
                });

            modelBuilder.Entity("EFGetStarted.CERT_teacher", b =>
                {
                    b.Property<int>("TeacherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("varchar(25)");

                    b.Property<int?>("courselistcourseid")
                        .HasColumnType("int");

                    b.HasKey("TeacherId");

                    b.HasIndex("courselistcourseid");

                    b.ToTable("CERT_teacher_all","11nstz");
                });

            modelBuilder.Entity("EFGetStarted.CERT_Student", b =>
                {
                    b.HasOne("EFGetStarted.CERT_courselist", "courselist")
                        .WithMany()
                        .HasForeignKey("courselistcourseid");
                });

            modelBuilder.Entity("EFGetStarted.CERT_course", b =>
                {
                    b.HasOne("EFGetStarted.CERT_teacher", null)
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFGetStarted.CERT_studentlist", "studentlist")
                        .WithMany()
                        .HasForeignKey("studentlistId");
                });

            modelBuilder.Entity("EFGetStarted.CERT_courselist", b =>
                {
                    b.HasOne("EFGetStarted.CERT_course", null)
                        .WithMany()
                        .HasForeignKey("courseid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFGetStarted.CERT_studentlist", "studentIdlist")
                        .WithMany()
                        .HasForeignKey("studentIdlistId");
                });

            modelBuilder.Entity("EFGetStarted.CERT_studentlist", b =>
                {
                    b.HasOne("EFGetStarted.CERT_Student", null)
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFGetStarted.CERT_teacher", b =>
                {
                    b.HasOne("EFGetStarted.CERT_courselist", "courselist")
                        .WithMany()
                        .HasForeignKey("courselistcourseid");
                });
#pragma warning restore 612, 618
        }
    }
}
